# - name: Upgrade router firmware (removes all settings)
#   ansible.builtin.raw: sysupgrade -n {{ router_firmware }}

# - name: Wait for reboot
#   wait_for_connection:
#     delay: 60

- name: Install Python
  ansible.builtin.raw: test -e /usr/bin/python3 || ( opkg update && opkg install python3-light python3-logging )
  changed_when: false

- name: Update opkg repository and install python3-light if not already installed
  community.general.opkg:
    name: python3-light
    update_cache: true

- name: Configure hostname
  ansible.builtin.command: uci set system.@system[0].hostname={{ inventory_hostname_short }}
  changed_when: false

- name: Configure timezone
  ansible.builtin.command: uci set system.@system[0].timezone={{ timezone }}
  changed_when: false

- name: Configure networks
  ansible.builtin.template:
    dest: /etc/config/network
    src: files/{{ inventory_hostname }}/etc/config/network.j2
    mode: u=rw,g=,o=

- name: Install WPA3 compatible packages
  ansible.builtin.command: opkg --force-depends --force-maintainer --force-overwrite install hostapd-openssl wpa-supplicant-openssl wpad-openssl
  args:
    creates: /usr/lib/opkg/info/wpa-supplicant-openssl.postinst

- name: Configure WiFi
  ansible.builtin.template:
    dest: /etc/config/wireless
    src: files/{{ inventory_hostname }}/etc/config/wireless.j2
    mode: u=rw,g=,o=

- name: Configure DHCP
  ansible.builtin.template:
    dest: /etc/config/dhcp
    src: files/{{ inventory_hostname }}/etc/config/dhcp.j2
    mode: u=rw,g=,o=

- name: Configure Firewall
  ansible.builtin.copy:
    dest: /etc/config/firewall
    src: files/{{ inventory_hostname }}/etc/config/firewall
    mode: u=rw,g=,o=

- name: Create dropbear_rsa_host_key for dropbear (/etc/dropbear/dropbear_rsa_host_key)
  ansible.builtin.copy:
    dest: /etc/dropbear/dropbear_rsa_host_key
    src: files/{{ inventory_hostname }}/etc/dropbear/dropbear_rsa_host_key
    mode: u=rw,g=,o=

- name: Create authorized_keys for dropbear (/etc/dropbear/authorized_keys)
  ansible.builtin.template:
    dest: /etc/dropbear/authorized_keys
    src: files/etc/dropbear/authorized_keys.j2
    mode: u=rw,g=r,o=r

- name: Install packages
  community.general.opkg:
    name: "{{ item }}"
  loop: "{{ packages }}"
  register: result
  until: result is succeeded

- name: Set root password
  ansible.builtin.replace:
    path: /etc/shadow
    regexp: "^root:([^:]*):"
    replace: "root:{{ root_password | string | password_hash('md5') }}:" # DevSkim: ignore DS126858
  changed_when: false

- name: Change root shell to /bin/bash
  ansible.builtin.replace:
    path: /etc/passwd
    regexp: "^root:(.*):/bin/ash"
    replace: "root:\\1:/bin/bash"

- name: Add nice prompt for root user
  ansible.builtin.blockinfile:
    dest: /etc/profile
    block: |
      ps1_prompt() {
          local ps1_exit=$?

          if [ $ps1_exit -eq 0 ]; then
              ps1_status='\$'
          else
              ps1_status=`echo -e "\[\\033[1;31m\]"'\\\$'"\[\\033[00m\]"`
          fi

          PS1="\[\\033[01;31m\]\u@\h\[\\033[00m\]:\[\\033[01;34m\]\w${ps1_status} \[\\033[00m\]"
      }

      PROMPT_COMMAND="ps1_prompt;$PROMPT_COMMAND"

- name: Create /etc/profile.d directory
  ansible.builtin.file:
    path: /etc/profile.d
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Get the history format file (/etc/profile.d/history_format.sh)
  ansible.builtin.copy:
    dest: /etc/profile.d/history_format.sh
    mode: u=rw,g=r,o=r
    content: |
      HISTTIMEFORMAT="|%F %R| "

- name: Configure vnstat (/etc/config/vnstat)
  ansible.builtin.template:
    dest: /etc/config/vnstat
    src: files/etc/config/vnstat.j2
    mode: u=rw,g=,o=

############################################
# Add backup script
############################################

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ openwrt_backup_directory }}"
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Copy the backup script collectd_nlbwmon_vnstat-backup to /etc/init.d/
  ansible.builtin.template:
    dest: /etc/init.d/collectd_nlbwmon_vnstat-backup
    src: files/etc/init.d/collectd_nlbwmon_vnstat-backup.j2
    mode: u=rwx,g=rx,o=rx

- name: Configure to run collectd_nlbwmon_vnstat-backup daily
  ansible.builtin.cron:
    name: "Backup collectd nlbwmon vnstat databases"
    minute: "0"
    hour: "2"
    job: "/etc/init.d/collectd_nlbwmon_vnstat-backup backup"

############################################
# Configure ssmtp + email notifications
############################################

- name: Configure ssmtp
  ansible.builtin.template:
    dest: /etc/ssmtp/ssmtp.conf
    src: files/etc/ssmtp/ssmtp.conf.j2
    mode: u=rw,g=,o=

- name: Reboot notification
  ansible.builtin.template:
    dest: /etc/rc.local
    src: files/etc/rc.local.j2
    mode: u=rwx,g=rx,o=rx

############################################
# Web server
############################################

- name: Remove old ssl certificates /etc/{uhttpd.crt,uhttpd.key} to let them autogenerated after uhttp starts
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/uhttpd.crt
    - /etc/uhttpd.key

- name: Configure ssl for uhttpd
  ansible.builtin.shell: |
    uci set uhttpd.defaults.country=cz &&
    uci set uhttpd.defaults.commonname={{ inventory_hostname }} &&
    uci set uhttpd.defaults.location=CZ &&
    uci set uhttpd.defaults.location="Czech Republic" &&
    uci set uhttpd.defaults.state="Czech Republic"
  changed_when: false

- name: Configure watchcat
  ansible.builtin.command: uci set system.@watchcat[0].period=5m
  changed_when: false

- name: Configure collectd_dns
  ansible.builtin.shell: |
    uci set luci_statistics.collectd_dns.enable=1 &&
    uci set luci_statistics.collectd_dns.Interfaces=any
  changed_when: false

- name: Configure collectd_interface
  ansible.builtin.command: |
    uci set luci_statistics.collectd_interface.Interfaces="{{ interfaces | join(' ') }}"
  changed_when: false

- name: Configure collectd_ping
  ansible.builtin.shell: |
    uci set luci_statistics.collectd_processes.enable=1 &&
    uci set luci_statistics.collectd_processes.Processes="{{ luci_statistics_collectd_processes_processes }}"
  changed_when: false

- name: Configure collectd_ping
  ansible.builtin.shell: |
    uci set luci_statistics.collectd_ping.enable=1 &&
    uci set luci_statistics.collectd_ping.Hosts=www.google.com
  changed_when: false

- name: Configure collectd_rrdtool
  ansible.builtin.shell: |
    uci set luci_statistics.collectd_rrdtool.CacheTimeout=120 &&
    uci set luci_statistics.collectd_rrdtool.CacheFlush=900
  changed_when: false

- name: Configure collectd_tcpconns
  ansible.builtin.shell: |
    uci set luci_statistics.collectd_tcpconns.LocalPorts="{{ luci_statistics_collectd_tcpconns_localports }}" &&
    uci set luci_statistics.collectd_tcpconns.enable=1
  changed_when: false

- name: Configure collectd_uptime
  ansible.builtin.command: |
    uci set luci_statistics.collectd_uptime.enable=1
  changed_when: false

- name: Enable services on boot
  community.general.openwrt_init:
    name: "{{ item }}"
    state: started
    enabled: true
  loop: "{{ enable_boot_services }}"
