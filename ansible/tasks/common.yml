- name: Install Python
  ansible.builtin.raw: test -e /usr/bin/python3 || ( opkg update && opkg install python3-light python3-logging python3-urllib python3-decimal )
  changed_when: false

- name: Configure hostname
  ansible.builtin.command: |
    uci set system.@system[0].hostname={{ inventory_hostname_short }}
  changed_when: false

- name: Configure timezone
  ansible.builtin.command: |
    uci set system.@system[0].timezone={{ timezone }}
  changed_when: false

- name: Create dropbear_*_host_key for dropbear
  ansible.builtin.copy:
    dest: /etc/dropbear/{{ item }}
    src: files/{{ inventory_hostname }}/etc/dropbear/{{ item }}
    mode: u=rw,g=,o=
  loop:
    - dropbear_ed25519_host_key
    - dropbear_rsa_host_key

- name: Create authorized_keys for dropbear (/etc/dropbear/authorized_keys)
  ansible.builtin.template:
    dest: /etc/dropbear/authorized_keys
    src: files/etc/dropbear/authorized_keys.j2
    mode: u=rw,g=,o=

- name: Configure networks
  ansible.builtin.template:
    dest: /etc/config/network
    src: files/{{ inventory_hostname }}/etc/config/network.j2
    mode: u=rw,g=,o=

- name: Configure Firewall
  ansible.builtin.copy:
    dest: /etc/config/firewall
    src: files/{{ inventory_hostname }}/etc/config/firewall
    mode: u=rw,g=,o=

- name: Configure WiFi
  ansible.builtin.template:
    dest: /etc/config/wireless
    src: files/{{ inventory_hostname }}/etc/config/wireless.j2
    mode: u=rw,g=,o=

- name: Set root password
  ansible.builtin.replace:
    path: /etc/shadow
    regexp: "^root:([^:]*):"
    replace: "root:{{ root_password | string | password_hash('md5') }}:" # DevSkim: ignore DS126858
  changed_when: false

- name: Install packages
  community.general.opkg:
    name: "{{ openwrt_packages | join(',') }}"
    update_cache: true
  register: result
  until: result is succeeded

- name: Configure DHCP
  ansible.builtin.template:
    dest: /etc/config/dhcp
    src: files/{{ inventory_hostname }}/etc/config/dhcp.j2
    mode: u=rw,g=,o=

- name: Change root shell to /bin/bash
  ansible.builtin.replace:
    path: /etc/passwd
    regexp: "^root:(.*):/bin/ash"
    replace: "root:\\1:/bin/bash"

- name: Add nice prompt for root user
  ansible.builtin.blockinfile:
    dest: /etc/profile
    block: |
      ps1_prompt() {
          local ps1_exit=$?

          if [ $ps1_exit -eq 0 ]; then
              ps1_status='\$'
          else
              ps1_status=`echo -e "\[\\033[1;31m\]"'\\\$'"\[\\033[00m\]"`
          fi

          PS1="\[\\033[01;31m\]\u@\h\[\\033[00m\]:\[\\033[01;34m\]\w${ps1_status} \[\\033[00m\]"
      }

      PROMPT_COMMAND="ps1_prompt;$PROMPT_COMMAND"

- name: Create /etc/profile.d directory
  ansible.builtin.file:
    path: /etc/profile.d
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Get the history format file (/etc/profile.d/history_format.sh)
  ansible.builtin.copy:
    dest: /etc/profile.d/history_format.sh
    mode: u=rw,g=r,o=r
    content: |
      HISTTIMEFORMAT="|%F %R| "

- name: Configure vnstat (/etc/config/vnstat)
  ansible.builtin.template:
    dest: /etc/config/vnstat
    src: files/etc/config/vnstat.j2
    mode: u=rw,g=,o=

- name: Configure watchcat
  ansible.builtin.command: |
    uci set watchcat.@watchcat[0].period=5m
  changed_when: false

- name: Enable prometheus to liston on lan
  ansible.builtin.command: |
    uci set prometheus-node-exporter-lua.@prometheus-node-exporter-lua[0].listen_interface=lan
  changed_when: false

- name: Enable hd-idle
  ansible.builtin.command: |
    uci set hd-idle.@hd-idle[-1].enabled=1
  changed_when: false

- name: Luci statistics (/etc/config/luci_statistics)
  ansible.builtin.template:
    dest: /etc/config/luci_statistics
    src: files/etc/config/luci_statistics.j2
    mode: u=rw,g=r,o=r

- name: Create directory for mc inside ~/.config
  ansible.builtin.file:
    path: ~/.config/mc/
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Create MC config file
  ansible.builtin.copy:
    dest: ~/.config/mc/ini
    mode: u=rw,g=r,o=r
    content: |
      [Midnight-Commander]
      auto_save_setup=0
      drop_menus=1
      use_internal_edit=1
      confirm_exit=0
      editor_return_does_auto_indent=0

      [Layout]
      keybar_visible=0
      menubar_visible=0
      message_visible=0

      [Panels]
      navigate_with_arrows=1

- name: Configure MC to run without mouse (/etc/profile.d/my-mc.sh)
  ansible.builtin.copy:
    dest: /etc/profile.d/my-mc.sh
    src: files/{{ inventory_hostname }}/etc/profile.d/my-mc.sh
    mode: u=rwx,g=rx,o=rx

- name: Enable adblock lists
  ansible.builtin.shell:
    cmd: set -o pipefail && uci show adblock.global.adb_sources | grep -q "{{ item }}" || uci add_list adblock.global.adb_sources={{ item }}
    executable: /bin/bash
  loop: "{{ adblock_lists }}"
  changed_when: false

- name: Cronjob for adblock regular block list update
  ansible.builtin.cron:
    name: "Adblock regular block list update"
    weekday: "1"
    minute: "0"
    hour: "4"
    job: "/etc/init.d/adblock reload"

############################################
# Configure msmtp + email notifications
############################################

- name: Configure msmtp
  ansible.builtin.template:
    dest: /etc/msmtprc
    src: files/etc/msmtprc.j2
    mode: u=rw,g=,o=

- name: Reboot notification
  ansible.builtin.template:
    dest: /etc/rc.local
    src: files/etc/rc.local.j2
    mode: u=rwx,g=rx,o=rx

############################################
# USB disk
############################################

- name: Configure attached block device {{ usb_disk_device }}
  ansible.builtin.template:
    dest: /etc/config/fstab
    src: files/{{ inventory_hostname }}/etc/config/fstab.j2
    mode: u=rw,g=r,o=r

- name: Create directory {{ usb_disk_mount_path }}
  ansible.builtin.file:
    path: "{{ usb_disk_mount_path }}"
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Check the mounted disks
  ansible.builtin.command: |
    cat /proc/mounts
  changed_when: false
  register: mount_output

- name: Create file usb_disk_mount_path/USB_DISK_NOT_PRESENT if usb_disk_device_1 is not mounted
  ansible.builtin.file:
    path: "{{ usb_disk_mount_path }}/USB_DISK_NOT_PRESENT"
    state: touch
    mode: u=rw,g=r,o=r
  when: mount_output.stdout is not search('/dev/' + usb_disk_device + '1 ' + usb_disk_mount_path )

- name: Mount USB disk
  ansible.builtin.command: |
    /sbin/block mount
  register: block_mount
  changed_when: block_mount.stdout is not search('/dev/' + usb_disk_device + '1 is already mounted')
  when: mount_output.stdout is not search('/dev/' + usb_disk_device + '1 ' + usb_disk_mount_path )

- name: Create "media" directories on the disk
  ansible.builtin.file:
    path: "{{ usb_disk_mount_path }}/{{ item.name }}"
    state: directory
    owner: ftp
    group: ftp
    mode: "{{ item.mode | default('u=rwx,g=rx,o=rx') }}"
  loop:
    - name: media
      mode: u=rx,g=rx,o=rx
    - name: media/movies
    - name: media/music

- name: Allow access to media using http (uhttpd)
  ansible.builtin.file:
    src: "{{ usb_disk_mount_path }}/media"
    dest: /www/media
    state: link

############################################
# Add backup script
############################################

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ openwrt_backup_directory }}"
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Copy the backup script collectd_nlbwmon_vnstat-backup to /etc/init.d/
  ansible.builtin.template:
    dest: /etc/init.d/collectd_nlbwmon_vnstat-backup
    src: files/etc/init.d/collectd_nlbwmon_vnstat-backup.j2
    mode: u=rwx,g=rx,o=rx

- name: Configure to run collectd_nlbwmon_vnstat-backup daily
  ansible.builtin.cron:
    name: "Backup collectd nlbwmon vnstat databases"
    minute: "0"
    hour: "3"
    job: "/etc/init.d/collectd_nlbwmon_vnstat-backup backup"

############################################
# Transmission
############################################

- name: Configure transmission
  ansible.builtin.template:
    dest: /etc/config/transmission
    src: files/etc/config/transmission.j2
    mode: u=rw,g=r,o=r

- name: Install transmission torrent done smtp notification script
  ansible.builtin.template:
    dest: /etc/torrent-done.sh
    src: files/etc/torrent-done.sh.j2
    mode: u=rwx,g=rx,o=rx

- name: Start transmission
  community.general.openwrt_init:
    name: transmission
    state: started
    enabled: true

- name: Download block list
  ansible.builtin.command: wget "{{ transmission_blocklist_url }}" -O "{{ usb_disk_mount_path }}/torrents/config/blocklists/bt_blocklists"
  args:
    creates: "{{ usb_disk_mount_path }}/torrents/config/blocklists/bt_blocklists"
  tags:
    - skip_ansible_lint

- name: Set proper permissions for block list
  ansible.builtin.file:
    path: "{{ usb_disk_mount_path }}/torrents/config/blocklists/bt_blocklists"
    owner: transmission
    group: transmission
    mode: u=rw,g=r,o=r

- name: Restore data using collectd_nlbwmon_vnstat-backup
  ansible.builtin.command: /etc/init.d/collectd_nlbwmon_vnstat-backup restore
  args:
    creates: /tmp/rrd/{{ inventory_hostname_short }}/cpu-0
