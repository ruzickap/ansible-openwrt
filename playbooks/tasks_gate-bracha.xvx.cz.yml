- name: Configure attached block device {{ usb_disk_device }}
  template:
    dest: /etc/config/fstab
    src: files/{{ inventory_hostname }}/etc/config/fstab.j2

- name: Create {{ usb_disk_mount_path }} directory
  file:
    path: "{{ usb_disk_mount_path }}"
    state: directory

- name: Check the mounted disks
  command: cat /proc/mounts
  changed_when: false
  register: mount_output

- name: Create file {{ usb_disk_mount_path }}/USB_DISK_NOT_PRESENT if {{ usb_disk_device }}1 is not mounted
  file:
    path: "{{ usb_disk_mount_path }}/USB_DISK_NOT_PRESENT"
    state: touch
    mode: 0444
  when: mount_output.stdout is not search('/dev/' + usb_disk_device + '1 ' + usb_disk_mount_path )

- name: Mount USB disk
  command: /sbin/block mount
  register: block_mount
  changed_when: block_mount.stdout is not search('/dev/' + usb_disk_device + '1 is already mounted')
  when: mount_output.stdout is not search('/dev/' + usb_disk_device + '1 ' + usb_disk_mount_path )

############################################
# Samba
############################################

- name: Configure Samba (/etc/config/samba)
  template:
    dest: /etc/config/samba
    src: files/{{ inventory_hostname }}/etc/config/samba.j2

- name: Create local credential file for smaba
  delegate_to: localhost
  copy:
    dest: "{{ lookup('env','HOME') }}/Documents/secrets/{{ inventory_hostname }}-cifs-credentials"
    content: |
      [{{ inventory_hostname }}]
      username=root
      password={{ samba_root_password }}
    mode: 0600
    owner: "{{ lookup('env','USER') }}"
    group: "{{ lookup('env','USER') }}"

- name: Set SMB password for root
  shell: echo -e "{{ samba_root_password }}\n{{ samba_root_password }}" | smbpasswd -a -s root
  changed_when: false

- name: Allow root to use samba
  replace:
    path: /etc/samba/smb.conf.template
    regexp: "^(\\s)invalid users = root"
    replace: "\\1# invalid users = root"

############################################
# Transmission
############################################

- name: Create directories for torrents
  file:
    path: "{{ usb_disk_mount_path }}/torrents/{{ item }}"
    state: directory
    owner: transmission
    group: transmission
  loop:
    - config
    - torrents
    - torrents-completed
    - torrents-incomplete

- name: Configure transmission
  template:
    dest: /etc/config/transmission
    src: files/{{ inventory_hostname }}/etc/config/transmission.j2

- name: Install transmission torrent done smtp notification script
  template:
    dest: /etc/torrent-done.sh
    src: files/{{ inventory_hostname }}/etc/torrent-done.sh.j2
    mode: 0755

- name: Create /www/torrents directory
  file:
    path: /www/torrents
    state: directory

- name: Allow access to torrents-completed and torrents using http (uhttpd)
  file:
    src: "{{ usb_disk_mount_path }}/{{ item }}"
    dest: /www/{{ item }}
    state: link
    force: yes
  loop:
    - torrents/torrents-completed
    - torrents/torrents

- name: Configure collectd_df
  shell: |
    uci set luci_statistics.collectd_df.enable=1 &&
    uci set luci_statistics.collectd_df.Devices=/dev/{{ usb_disk_device }}1 &&
    uci set luci_statistics.collectd_df.MountPoints={{ usb_disk_mount_path }} &&
    uci set luci_statistics.collectd_df.FSTypes=ext4
  changed_when: false

- name: Configure collectd_disk
  shell: |
    uci set luci_statistics.collectd_disk.enable=1 &&
    uci set luci_statistics.collectd_disk.Disks={{ usb_disk_device }}
  changed_when: false

- name: Enable hd-idle
  command: |
    uci set hd-idle.@hd-idle[-1].enabled=1
  changed_when: false

- name: Download MC config file
  get_url:
    url: https://raw.githubusercontent.com/ruzickap/ansible-role-my_common_defaults/master/files/etc/skel/.config/mc/ini
    dest: /etc/mc/ini

- name: Configure MC to run without mouse (/etc/profile.d/my-mc.sh)
  copy:
    dest: /etc/profile.d/my-mc.sh
    src: files/{{ inventory_hostname }}/etc/profile.d/my-mc.sh

- name: Enable file highightning in mc
  get_url:
    url: https://raw.github.com/MidnightCommander/mc/master/misc/filehighlight.ini
    dest: /etc/mc/filehighlight.ini

- name: Enable adblock
  command: |
    uci set adblock.global.adb_enabled=1
  changed_when: false

- name: Enable adblock lists
  command: |
    uci set adblock.{{ item }}.enabled=1
  loop: "{{ adblock_lists }}"
  changed_when: false

- name: Cronjob for adblock regular block list update
  cron:
    name: "Adblock regular block list update"
    minute: "0"
    hour: "4"
    job: "/etc/init.d/adblock reload"
